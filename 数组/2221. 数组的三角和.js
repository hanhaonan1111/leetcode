/**
 * 给你一个下标从 0 开始的整数数组 nums ，其中 nums[i] 是 0 到 9 之间（两者都包含）的一个数字。
 * nums 的 三角和 是执行以下操作以后最后剩下元素的值：
 * nums 初始包含 n 个元素。如果 n == 1 ，终止 操作。否则，创建 一个新的下标从 0 开始
 * 的长度为 n - 1 的整数数组 newNums 。
 * 对于满足 0 <= i < n - 1 的下标 i ，newNums[i] 赋值 为 (nums[i] + nums[i+1]) % 10 ，% 表示取余运算。
 * 将 newNums 替换 数组 nums 。
 * 从步骤 1 开始 重复 整个过程。
 * 请你返回 nums 的三角和。 
 */

var triangularSum = function (nums) {
    let other = []
    if (nums.length < 2) {
        return nums[0]
    }
    while (other.length !== 1) {
        other = []
        for (let i = 0; i < nums.length - 1; i++) {
            let next = i + 1
            let cur = nums[i]   // 当前值
            let nextVal = nums[next]   // 下一个值   
            other[i] = (cur + nextVal) % 10
        }
        nums = other
    }
    return other[0]
};

let res = triangularSum([5, 3, 5, 1, 7, 2, 6, 6, 4, 0, 4, 6, 4, 3, 1, 4, 0, 8, 2, 4, 3, 4, 9, 0, 5, 5, 0, 4, 6, 0, 6, 3, 4, 2, 2, 7, 3, 8, 1, 0, 5, 3, 1, 9, 0, 2, 2, 5, 8, 6, 2, 3, 2, 3, 5, 8, 5, 4, 1, 2, 0, 9, 3, 4, 4, 4, 1, 5, 1, 9, 2, 0, 8, 4, 3, 2, 4, 1, 9, 2, 4, 9, 2, 0, 1, 2, 3, 3, 8, 6, 0, 7, 3, 5, 7, 7, 9, 2, 5, 3, 2, 3, 4, 9, 3, 3, 5, 3, 4, 0, 7, 2, 1, 2, 5, 0, 5, 0, 6, 9, 7, 6, 5, 3, 2, 9, 8, 9, 4, 1, 8, 4, 8, 3, 7, 2, 2, 0, 1, 2, 3, 2, 2, 5, 8, 0, 1, 1, 3, 3, 3, 8, 4, 5, 6, 2, 6, 5, 7, 0, 4, 6, 6, 2, 2, 6, 7, 6, 1, 2, 7, 7, 6, 0, 4, 9, 9, 8, 1, 8, 3, 3, 5, 4, 5, 0, 9, 4, 0, 8, 6, 3, 7, 1, 8, 3, 4, 6, 6, 1])
console.log(res, '[]');